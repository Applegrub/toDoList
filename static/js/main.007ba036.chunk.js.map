{"version":3,"sources":["Components/AddToDo.tsx","Components/ToDoItem.tsx","Components/ToDoList.tsx","Components/ModalWindow.tsx","App.tsx","stores/SubStore.ts","stores/ToDoStore.ts","stores/NotificationStore.ts","index.tsx","stores/RootStore.ts"],"names":["Wrapper","styled","div","Input","input","Button","button","AddToDo","inject","observer","state","title","isValid","handleAdd","props","toDoStore","addTodo","setState","handleChangeInput","e","target","value","this","onChange","placeholder","css","onClick","React","Component","Root","Item","DeleteButton","ChangeButton","ToDoItem","handleOpenChangeDialog","notificationStore","HandlerEditPage","titleOfToDo","toDo","isCompleted","completed","id","type","handlerToDo","deleteToDo","ToDoList","toDos","map","i","key","Modal","H1","h1","H2","h2","ButtonSet","ModalWindow","oldTitle","newTitle","changeToDo","App","isOpenEditPage","SubStore","rootStore","initData","ToDoStore","observable","action","push","length","filter","console","log","oldToDo","NotificationStore","mobXStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.007ba036.chunk.js","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ToDoStore } from \"../stores\";\nimport { inject, observer } from \"mobx-react\";\nimport { css, jsx } from \"@emotion/core\";\n\nconst Wrapper = styled.div`\nbackground: #212029;\npadding: 30px 40px;\ncolor: white;\njustify-content: center;\ntext-align: center;\n`\n\nconst Input = styled.input`\nwidth: 600px;\nheight: 30px;\nborder-radius: 100px;\n`\n\nconst Button = styled.button`\nheight: 40px;\nbackground: #3B3A43;\nborder-radius: 100px;\noutline: none;\ncolor: white;\n`\n\nexport interface IProps {\n    toDoStore?: ToDoStore\n}\n\ninterface IState {\n    title: string,\n    isValid: boolean\n}\n\n@inject('toDoStore')\n@observer\nclass AddToDo extends React.Component<IProps, IState> {\n\n    state = {\n        title: '',\n        isValid: true\n    };\n\n    handleAdd = () => {\n        if (this.state.title !== '') {\n            this.props.toDoStore!.addTodo(this.state.title);\n            this.setState({ title: '', isValid: true })\n        } else {\n            this.setState({ isValid: false })\n        }\n    }\n\n\n    handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) =>\n        this.setState({ title: e.target.value, isValid: e.target.value !== '' });\n\n    render() {\n        const { isValid, title } = this.state\n        return <Wrapper>\n            <h1>Список дел</h1>\n            <Input\n                onChange={this.handleChangeInput}\n                value={title}\n                placeholder=\"Введите новое дело...\"\n                css={css`border: 1px solid ${isValid ? 'transparent' : 'red'};`}\n            />\n            <Button onClick={this.handleAdd}>Добавить</Button>\n        </Wrapper>\n    }\n}\n\n\nexport default AddToDo;\n","/** @jsx jsx */\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { TToDoItem } from \"../stores/ToDoStore\"\nimport { NotificationStore, ToDoStore } from \"../stores\";\nimport { inject, observer } from \"mobx-react\";\nimport { css, jsx } from \"@emotion/core\";\n\ninterface IProps {\n    toDo: TToDoItem\n    toDoStore?: ToDoStore\n    notificationStore?: NotificationStore\n}\n\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border: 1px solid #fff;\n  padding: 10px;\n  color: #fff;\n`\nconst Item = styled.div`\ndisplay: flex;\nposition: relative;\n`\nconst Input = styled.input`\nmargin-right: 10px;\n`\n\nconst DeleteButton = styled.button`\nposition: absolute;\nmargin-left: 90%;\nbackground: #E85D58;\nborder-radius: 100px;\nheight: 30px;\n`\nconst ChangeButton = styled.button`\ncolor: white;\nposition: absolute;\nmargin-left: 80%;\nbackground: #3B3A43;\nborder-radius: 100px;\nheight: 30px;\n`\n\n@inject('toDoStore', 'notificationStore')\n@observer\nexport default class ToDoItem extends React.Component<IProps> {\n\n    handleOpenChangeDialog = () => {\n        this.props.notificationStore!.HandlerEditPage()\n        this.props.notificationStore!.titleOfToDo = this.props.toDo.title\n    }\n\n    render() {\n        const isCompleted = this.props.toDo.completed;\n        const id = this.props.toDo.id;\n        return <Root>\n            <Item css={css`text-decoration: ${isCompleted ? 'line-through' : 'none'};`}>\n                <Input type=\"checkbox\"\n                    onChange={() => this.props.toDoStore!.handlerToDo(id)} />\n                {this.props.toDo.title}\n                <DeleteButton\n                    onClick={() => this.props.toDoStore!.deleteToDo(id)}>\n                    Удалить\n                          </DeleteButton>\n                <ChangeButton onClick={this.handleOpenChangeDialog}>\n                    Изменить\n                        </ChangeButton>\n            </Item>\n        </Root>\n    }\n}\n","import React from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport styled from \"@emotion/styled\";\nimport { ToDoStore } from \"../stores\";\nimport { inject, observer } from \"mobx-react\";\n\nexport interface IProps {\n    toDoStore?: ToDoStore\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: -5px;\n  \n  & > * {\n  margin: 5px;\n  }\n  \n`\n\n@inject('toDoStore')\n@observer\nclass ToDoList extends React.Component<IProps> {\n\n    render() {\n        const { toDos } = this.props.toDoStore!;\n        return <Root>{\n            toDos.map((toDo, i) => <ToDoItem toDo={toDo} key={i} />)\n        }</Root>\n    }\n\n}\n\nexport default ToDoList\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { inject, observer } from \"mobx-react\";\nimport { NotificationStore, ToDoStore } from \"../stores\";\n\ninterface IProps {\n    notificationStore?: NotificationStore;\n    toDoStore?: ToDoStore\n}\ninterface IState {\n    title: string\n}\n\nconst Root = styled.div`\nposition: fixed;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nbackground-color: rgba(0,0,0,.5);\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n`\n\nconst Modal = styled.div`\nz-index: 1;\nwidth: 600px;\nheight: 300px;\nbackground: #4F4E56;\nborder-radius: 50px;\nborder: 5px solid white;\ncolor: white;\n`\nconst H1 = styled.h1`\nmargin-left: 140px;\nwidth: 350px;\n`\nconst H2 = styled.h2`\nmargin-left: 180px;\nwidth: 250px;\n`\nconst Input = styled.input`\nmargin-top: 30px;\nmargin-left: 50px;\nwidth: 500px;\nheight: 30px;\nborder-radius: 100px;\n`\nconst Button = styled.button`\nfont-size: 1em;\nheight: 40px;\nbackground: #3B3A43;\nborder-radius: 100px;\noutline: none;\ncolor: white;\n`\nconst ButtonSet = styled.div`\nmargin: 30px 0 0 250px;\nwidth: 300px;\ndisplay: flex;\njustify-content: space-between;\n`\n\n@inject('notificationStore', 'toDoStore')\n@observer\nexport default class ModalWindow extends React.Component<IProps, IState> {\n\n    state = {\n        title: ''\n    }\n\n\n    handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) =>\n        this.setState({ title: e.target.value });\n\n\n    handleAdd = () => {\n        const oldTitle: string = this.props.notificationStore!.titleOfToDo\n        const newTitle: string = this.state.title\n        this.props.toDoStore!.changeToDo(newTitle, oldTitle)\n    }\n\n    render() {\n        const oldTitle = this.state.title\n        return <Root>\n            <Modal>\n                <H1>Custom&Homemade</H1>\n                <H2>Меняй что хочешь</H2>\n                <Input\n                    value={oldTitle}\n                    onChange={this.handleChangeInput}\n                    placeholder={this.props.notificationStore!.titleOfToDo} />\n                <ButtonSet>\n                    <Button onClick={this.handleAdd}>Добавить изменения</Button>\n                    <Button onClick={this.props.notificationStore!.HandlerEditPage}>Закрыть</Button>\n                </ButtonSet>\n            </Modal>\n        </Root>\n    }\n\n}\n","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport AddToDo from \"./Components/AddToDo\";\nimport ToDoList from \"./Components/ToDoList\";\nimport { inject, observer } from \"mobx-react\";\nimport { NotificationStore, ToDoStore } from \"./stores\";\nimport ModalWindow from \"./Components/ModalWindow\";\n\nconst Root = styled.div`\nbackground: #282731;\nwidth:100vw;\nheight: 100vh;\n`\nconst Wrapper = styled.div`\nwidth: 920px; \nmargin: 0 auto;\nbackground: #4F4E56;\nposition: relative;\n`\n\ninterface IProps {\n    notificationStore?: NotificationStore\n    toDoStore?: ToDoStore\n}\n\n@inject('notificationStore')\n@observer\nexport default class App extends React.Component<IProps> {\n    render() {\n        return <Root>\n            <Wrapper>\n                <AddToDo />\n                <ToDoList />\n            </Wrapper>\n            {this.props.notificationStore!.isOpenEditPage && <ModalWindow />}\n        </Root>\n\n    }\n}\n","import {RootStore} from \"./index\";\n\nexport default class SubStore {\n    constructor(public rootStore: RootStore) {\n    }\n\n}\n","import { SubStore, RootStore} from \"./index\";\nimport { action, observable } from \"mobx\";\n\nconst initData: TToDoItem[] = [\n  {\n    id: 0,\n    completed: false,\n    title: \"Некая задача\",\n  },\n];\n\nexport type TToDoItem = {\n  id: number;\n  completed: boolean;\n  title: string;\n};\n\nexport default class ToDoStore extends SubStore {\n  @observable toDos: TToDoItem[] = [];\n\n  @action addTodo = (title: string) =>\n    this.toDos.push({\n      id: this.toDos.length,\n      title,\n      completed: false,\n    });\n\n  @action deleteToDo = (id: number) => {\n    this.toDos = this.toDos.filter((toDo) => toDo.id !== id);\n  };\n  @action handlerToDo = (id: number) => {\n    this.toDos[id].completed = !this.toDos[id].completed;\n    console.log(this.toDos[id].completed);\n  };\n  @action changeToDo = (newTitle: string, oldToDo: string) => {\n    const newToDo = this.toDos.map((toDo) => {\n      if (toDo.title === oldToDo) {\n        toDo.title = newTitle;\n      }\n    });\n    return newToDo;\n  };\n  constructor(rootStore: RootStore) {\n    super(rootStore);\n    this.toDos = initData;\n  }\n}\n","import { SubStore, RootStore, ToDoStore } from \"./index\";\nimport { action, observable } from \"mobx\";\n\nexport default class NotificationStore extends SubStore {\n  @observable isOpenEditPage = false;\n\n  @observable titleOfToDo = \"\";\n\n  @action HandlerEditPage = () => {\n    if (!this.isOpenEditPage) {\n      this.isOpenEditPage = true\n    }\n    else{\n      this.isOpenEditPage = false\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'mobx-react';\nimport {RootStore} from './stores';\n\nconst mobXStore = new RootStore();\n\nReactDOM.render(<Provider {...mobXStore}><App/></Provider>, document.getElementById('root'));\n","import { NotificationStore, ToDoStore } from \"./index\";\n\nexport default class RootStore {\n  public toDoStore: ToDoStore;\n  public notificationStore: NotificationStore;\n\n  constructor() {\n    this.toDoStore = new ToDoStore(this);\n    this.notificationStore = new NotificationStore(this);\n  }\n}\n"],"sourceRoot":""}